// Code generated by goctl. DO NOT EDIT!
// Source: sys.proto

//go:generate mockgen -destination ./sys_mock.go -package sysclient -source $GOFILE

package sysclient

import (
	"context"

	"wikifx-trade-contest/rpc/svs/sys/sys"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	I18NErrorResp  = sys.I18NErrorResp
	InfoResp       = sys.InfoResp
	UserListReq    = sys.UserListReq
	UserListResp   = sys.UserListResp
	UserAddResp    = sys.UserAddResp
	UserUpdateResp = sys.UserUpdateResp
	UserDeleteReq  = sys.UserDeleteReq
	UserDeleteResp = sys.UserDeleteResp
	I18NErrorReq   = sys.I18NErrorReq
	InfoReq        = sys.InfoReq
	UserAddReq     = sys.UserAddReq
	UserListData   = sys.UserListData
	UserUpdateReq  = sys.UserUpdateReq

	Sys interface {
		//  获取用户信息
		UserInfo(ctx context.Context, in *InfoReq) (*InfoResp, error)
		//  用户新增
		UserAdd(ctx context.Context, in *UserAddReq) (*UserAddResp, error)
		//  用户列表
		UserList(ctx context.Context, in *UserListReq) (*UserListResp, error)
		//  用户更新
		UserUpdate(ctx context.Context, in *UserUpdateReq) (*UserUpdateResp, error)
		//  用户删除
		UserDelete(ctx context.Context, in *UserDeleteReq) (*UserDeleteResp, error)
		//  todo 后期改进
		GetError(ctx context.Context, in *I18NErrorReq) (*I18NErrorResp, error)
	}

	defaultSys struct {
		cli zrpc.Client
	}
)

func NewSys(cli zrpc.Client) Sys {
	return &defaultSys{
		cli: cli,
	}
}

//  获取用户信息
func (m *defaultSys) UserInfo(ctx context.Context, in *InfoReq) (*InfoResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserInfo(ctx, in)
}

//  用户新增
func (m *defaultSys) UserAdd(ctx context.Context, in *UserAddReq) (*UserAddResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserAdd(ctx, in)
}

//  用户列表
func (m *defaultSys) UserList(ctx context.Context, in *UserListReq) (*UserListResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserList(ctx, in)
}

//  用户更新
func (m *defaultSys) UserUpdate(ctx context.Context, in *UserUpdateReq) (*UserUpdateResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserUpdate(ctx, in)
}

//  用户删除
func (m *defaultSys) UserDelete(ctx context.Context, in *UserDeleteReq) (*UserDeleteResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserDelete(ctx, in)
}

//  todo 后期改进
func (m *defaultSys) GetError(ctx context.Context, in *I18NErrorReq) (*I18NErrorResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.GetError(ctx, in)
}
